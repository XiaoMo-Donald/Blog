// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TzCA.DataAccess.SqlServer;
using TzCA.Entities.ApplicationOrganization;
using TzCA.Entities.BusinessManagement.Audit;

namespace TzCA.DataAccess.Migrations
{
    [DbContext(typeof(EntityDbContext))]
    partial class EntityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationRoleType");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(550);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("SortCode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid?>("AvatarId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Nickname");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<Guid?>("PersonId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Remark");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.SystemWorkPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("IconString")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<int>("SystemWorkPlaceType");

                    b.Property<string>("URL")
                        .HasMaxLength(250);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("SystemWorkPlaces");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.SystemWorkSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<Guid?>("SystemWorkPlaceId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("SystemWorkPlaceId");

                    b.ToTable("SystemWorkSections");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.SystemWorkTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessEntityName")
                        .HasMaxLength(100);

                    b.Property<string>("ControllerMethod")
                        .HasMaxLength(100);

                    b.Property<string>("ControllerMethodParameter")
                        .HasMaxLength(500);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("HasShortCutLinkItem");

                    b.Property<bool>("HasTileLinkItem");

                    b.Property<string>("IconName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsForDefaultSystemRoleGroup");

                    b.Property<bool>("IsForMeOnly");

                    b.Property<bool>("IsForMyDepartmentOnly");

                    b.Property<bool>("IsUsedInMenu");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<Guid?>("SystemWorkSectionId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("SystemWorkSectionId");

                    b.ToTable("SystemWorkTasks");
                });

            modelBuilder.Entity("TzCA.Entities.Attachments.BusinessFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("BinaryContent");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<long>("FileSize");

                    b.Property<string>("FileSuffix")
                        .HasMaxLength(10);

                    b.Property<string>("Icon")
                        .HasMaxLength(120);

                    b.Property<bool>("IsInDB");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(500);

                    b.Property<string>("PhysicalPath");

                    b.Property<string>("RelativePath");

                    b.Property<Guid>("RelevanceObjectId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("UploaderId");

                    b.HasKey("Id");

                    b.ToTable("BusinessFiles");
                });

            modelBuilder.Entity("TzCA.Entities.Attachments.BusinessImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100);

                    b.Property<long>("FileSize");

                    b.Property<string>("FileSuffix")
                        .HasMaxLength(256);

                    b.Property<int>("Height");

                    b.Property<string>("Icon")
                        .HasMaxLength(120);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(256);

                    b.Property<string>("PhysicalPath");

                    b.Property<string>("RelativePath");

                    b.Property<Guid>("RelevanceObjectId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("UploaderId");

                    b.Property<int>("Width");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.ToTable("BusinessImages");
                });

            modelBuilder.Entity("TzCA.Entities.Attachments.BusinessVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("BinaryContent");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<long>("FileSize");

                    b.Property<string>("FileSuffix")
                        .HasMaxLength(10);

                    b.Property<string>("Icon")
                        .HasMaxLength(120);

                    b.Property<bool>("IsInDB");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(500);

                    b.Property<string>("PhysicalPath");

                    b.Property<string>("RelativePath");

                    b.Property<Guid>("RelevanceObjectId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<Guid>("UploaderId");

                    b.HasKey("Id");

                    b.ToTable("BusinessVideos");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessManagement.Audit.AuditRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AuditDateTime");

                    b.Property<int>("AuditResult");

                    b.Property<Guid?>("AuditorId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("ObjectId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.ToTable("AuditRecords");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessOrganization.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActiveDepartment");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ParentDepartmentId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessOrganization.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessOrganization.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AvatarId");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CredentialsCode")
                        .HasMaxLength(26);

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("Duration");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpiredDateTime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("InquiryPassword")
                        .HasMaxLength(50);

                    b.Property<Guid?>("JobTitleId");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Nickname");

                    b.Property<string>("Remark");

                    b.Property<bool>("Sex");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TzCA.Entities.ChatRoom.ChatRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ReceiverId");

                    b.Property<Guid>("SenderId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.ToTable("ChatRecords");
                });

            modelBuilder.Entity("TzCA.Entities.ChatRoom.ChatRecordContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChatRecordId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Message");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ReceiverId");

                    b.Property<Guid>("SenderId");

                    b.Property<string>("SortCode")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("ChatRecordId");

                    b.ToTable("ChatRecordContents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TzCA.Entities.ApplicationOrganization.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.ApplicationRole", b =>
                {
                    b.HasOne("TzCA.Entities.BusinessOrganization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.ApplicationUser", b =>
                {
                    b.HasOne("TzCA.Entities.Attachments.BusinessImage", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("TzCA.Entities.BusinessOrganization.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.SystemWorkSection", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.SystemWorkPlace")
                        .WithMany("SystemWorkSections")
                        .HasForeignKey("SystemWorkPlaceId");
                });

            modelBuilder.Entity("TzCA.Entities.ApplicationOrganization.SystemWorkTask", b =>
                {
                    b.HasOne("TzCA.Entities.ApplicationOrganization.SystemWorkSection")
                        .WithMany("SystemWorkTasks")
                        .HasForeignKey("SystemWorkSectionId");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessManagement.Audit.AuditRecord", b =>
                {
                    b.HasOne("TzCA.Entities.BusinessOrganization.Person", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessOrganization.Department", b =>
                {
                    b.HasOne("TzCA.Entities.BusinessOrganization.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");
                });

            modelBuilder.Entity("TzCA.Entities.BusinessOrganization.Person", b =>
                {
                    b.HasOne("TzCA.Entities.Attachments.BusinessImage", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("TzCA.Entities.BusinessOrganization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("TzCA.Entities.BusinessOrganization.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");
                });

            modelBuilder.Entity("TzCA.Entities.ChatRoom.ChatRecordContent", b =>
                {
                    b.HasOne("TzCA.Entities.ChatRoom.ChatRecord", "ChatRecord")
                        .WithMany("ChatRecordContents")
                        .HasForeignKey("ChatRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
